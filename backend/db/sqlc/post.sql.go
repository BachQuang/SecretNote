// Code generated by sqlc. DO NOT EDIT.
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    email,
    title,
    content
) VALUES (
    $1, $2, $3
) RETURNING id, email, title, content, created_at, post_changed_at
`

type CreatePostParams struct {
	Email   string `json:"email"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost, arg.Email, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.PostChangedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deletePostStmt, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, email, title, content, created_at, post_changed_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.queryRow(ctx, q.getPostStmt, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.PostChangedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, email, title, content, created_at, post_changed_at FROM posts
WHERE 
    email = $1
ORDER BY created_at desc
LIMIT $2
OFFSET $3
`

type ListPostsParams struct {
	Email  string `json:"email"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.query(ctx, q.listPostsStmt, listPosts, arg.Email, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.PostChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
